

/* 
    
   String comparison 

   There are two methods to compare string 

   1 ] equals method
   2 ] == 

   both behave different with string , stringBuilder and stringBuffer 

   In context of string 
   
   1 ] equals method compare hashCode generated by hashCode() method 
        mean it checks the content raither than the memory references 
    
   2 ] == this compare memory references ie identityHashCode()
   
    we will see how both behave with stringBuffer and stringBuilder in respective 
    files 

    3 ] equalsIgnoreCase()
            this method ignore the uppercase and lowercase 
        
    

    4 ] a.compareTo(b)
        it returns the -ve  , 0 , +ve

        if(<0) string a is smaller than b 
        if(==0) a is equal to b (content)

        if(>0) a is greater than b



        


*/


public class file_4_String_Comparison {
    public static void main(String[] args) {
        String str1 = "Mystring 1";

        String str2 = "Mystring 1";

        String s1 = "Hii1";
        String s2 = "Hii1";

        // this will print false as identityHashCode of both strings is different
        System.out.println(str1 == str2 );

        // this will print true as content of both strings is equal
        System.out.println(str1.equals(str2));

        // this will print true as their references are same 
        System.out.println(s1==s2);


        
        System.out.println(s1.compareTo(str1)); // it returns -5 


        // if you observe then this function compareTo() gives the differebce between the 
        // hashcode of charactor  which is different (first differernt char);
        // just change the chars for the above s1 and str1 string to "Mbii" and str1 to "Mastring"
    }
}
